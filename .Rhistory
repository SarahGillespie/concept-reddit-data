import numpy as np
import trustscore # you need to have trustscore.py in the same folder as this .Rmd file to import it
import trustscore_evaluation  # you need to have trustscore_evaluation.py in the same folder as this .Rmd file to import it
import numpy as np
import matplotlib.pyplot as plt
import keras
# heads up! there might be some scary errors about "dlerror: cudart64_110.dll not found". It's just a warning and you can ignore it.
# Import the default dataset from SK learn: the wine dataset and the classifying
# United States Post Office digits / handwriting.
from sklearn import datasets
wine = datasets.load_wine()
X_wine = wine.data
y_wine = wine.target
from sklearn.linear_model import LogisticRegression
# Train logistic regression on digits.
model = LogisticRegression()
model.fit(X_wine, y_wine)
# Get outputs on testing set.
y_pred = model.predict(X_wine)
# Initialize trust score.
trust_model = trustscore.TrustScore()
trust_model.fit(X_wine, y_wine)
# Compute trusts score, given (unlabeled) testing examples and (hard) model predictions.
trust_score = trust_model.get_score(X_wine, y_pred)
print(trust_score) # prints the trust scores for each point in the inputted dataset
# type(trust_score) # this trust_score dataframe has a class of <class 'numpy.ndarray'>
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(eval = FALSE)
library(reticulate) # provides a comprehensive set of tools for interoperability between Python and R.
# configure python
reticulate::py_config() # Double check that reticulate is actually using your new conda env.
reticulate::py_install("sklearn", pip = TRUE) # force install with pip. sklearn wasn't coming up via anaconda.
reticulate::py_install("matplotlib")
reticulate::py_install("keras")
reticulate::py_install("pandas")
# setting up the Python environment and bringing in the required Python packages is important.
# It will probably take a little while so be patient and try to avoid accidentally running
# this chunk of code.
# common trouble shooting:
# if you're missing a package then try adding its name in an additonal line of py_install
# if py_install isn't working then try adding the pip = TRUE argument to try installing
# the library through pip rather than anaconda
reticulate::repl_python()
library(palmerpenguins)
library(dplyr)
# data
penguins_df <- penguins %>%
dplyr::filter(complete.cases(.)) # remove all lines with NaN so the model can be fit on the data (later)
penguins_data <- penguins_df %>%
dplyr::select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)
# target: species
penguins_target <- penguins_df %>%
dplyr::select(species)
# make each species into a categorical variable number
reticulate::repl_python()
py_last_error()
reticulate::repl_python()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(eval = FALSE)
# Load the R libraries
library(palmerpenguins) # bring in data about penguin species
library(dplyr) # tools for data wrangling in R
library(reticulate) # provides a comprehensive set of tools for interoperability between Python and R.
# configure python
reticulate::py_config() # Double check that reticulate is actually using your new conda env.
reticulate::py_install("sklearn", pip = TRUE) # force install with pip. sklearn wasn't coming up via anaconda.
reticulate::py_install("matplotlib")
reticulate::py_install("keras")
reticulate::py_install("pandas")
# setting up the Python environment and bringing in the required Python packages is important.
# Running this code will likely take 5 to 10 minutes if you do not already have
# these python packages installed. Otherwise,
# common trouble shooting:
# if you're missing a package then try adding its name in an additonal line of py_install
# if py_install isn't working then try adding the pip = TRUE argument to try installing
# the library through pip rather than anaconda
reticulate::repl_python()
# data
penguins_df <- penguins %>%
dplyr::filter(complete.cases(.))
# remove all lines with missing values so the model can fit the data
penguins_data <- penguins_df %>%
dplyr::select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)
# target: species
penguins_target <- penguins_df %>%
dplyr::select(species)
reticulate::repl_python()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(eval = FALSE)
library(reticulate) # provides a comprehensive set of tools for interoperability between Python and R.
conda_create("r-py-conda-3.6", python_version = "3.6")
conda_install(envname = "r-py-conda-3.6",
packages=("tensorflow"))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(eval = FALSE)
library(reticulate) # provides a comprehensive set of tools for interoperability between Python and R.
conda_create("r-py-conda-3.6", python_version = "3.6")
conda_create("r-py-conda-3.6", python_version = "3.6")
reticulate::py_config()
reticulate::py_install("sklearn", pip = TRUE)
reticulate::py_install("matplotlib")
reticulate::py_install("matplotlib")
reticulate::repl_python()
# Detour --- extra coding skills (optional)
# You can access variables created in the Python environment in the R studio Python
# environment but not the R environment, unless you define the objects within an
# R chunk.
# we can access to objects created within Python chunks from R using the py object (e.g. py$x would access an x variable created within Python from R).
class(py$trust_score) # should be an array
reticulate::repl_python()
# Detour --- extra coding skills (optional)
# You can access variables created in the Python environment in the R studio Python
# environment but not the R environment, unless you define the objects within an
# R chunk.
# we can access to objects created within Python chunks from R using the py object (e.g. py$x would access an x variable created within Python from R).
class(py$trust_score) # should be an array
# create an object in R by creating an R variable in an R code chunk
trust_score_as_an_R_data_structure <- py$trust_score
# Detour --- extra coding skills (optional)
# You can access variables created in the Python environment in the R studio Python
# environment but not the R environment, unless you define the objects within an
# R chunk.
# we can access to objects created within Python chunks from R using the py object (e.g. py$x would access an x variable created within Python from R).
class(py$trust_score) # should be an array
# create an object in R by creating an R variable in an R code chunk
trust_score_as_an_R_data_structure <- py$trust_score
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(dplyr) # tools for data wrangling in R
library(reticulate) # provides a comprehensive set of tools for interoperability
# between Python and R.
# R code chunk
# configure Python
reticulate::py_config() # Double check that reticulate is actually using a
# new conda environment.
reticulate::py_install("sklearn", pip = TRUE) # force install with pip. sklearn
# wasn't coming up via anaconda.
reticulate::py_install("matplotlib")
reticulate::py_install("keras")
reticulate::py_install("pandas")
# setting up the Python environment and bringing in the required Python packages
# is important.
# Running this code will likely take 5 to 10 minutes if these Python libraries
# are not already installed.
# Common trouble shooting:
# if missing a package, try adding its name in an additional argument of
# py_install. if py_install isn't working then try adding the pip = TRUE
# argument to try installing the library through pip rather than anaconda.
reticulate::repl_python()
def get_post_titles(r):
reticulate::repl_python()
library(ggplot2)
library(knitr)
# anscombe is built in to base R
anscombe_data <- datasets::anscombe
# implementation from the last HW
DIY_linear_regression<-function(x,y){
# single linear regression with a two-tailed p-value
mean_x<-mean(x)
mean_y<-mean(y)
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2)
b0<-mean_y-mean_x*b1
e<-y - (b0+b1*x) # e is the residuals.
mse<-sum(e^2)/(length(x)-2)
var_b1<-mse/sum((x-mean_x)^2)
t_b1<-b1/sqrt(var_b1)
p_b1<-(1-pt(abs(t_b1), df = (length(y)-2)))*2 #two tails
# new! R^2 = SSR/SSTO
ssr <- (b1^2)*sum((x-mean_x)^2)
ssto <- sum((y-mean_y)^2)
R_squared <- ssr/ssto
r <- sum((x-mean_x)*(y-mean_y))/sqrt(sum(((x-mean_x)^2)*sum((y-mean_y)^2)))
return(c(b0, b1, mse, var_b1, t_b1, p_b1, R_squared,r,e))
}
plot(anscombe_data$x1, anscombe_data$y1)
plot(anscombe_data$x2, anscombe_data$y2)
plot(anscombe_data$x3, anscombe_data$y3)
plot(anscombe_data$x4, anscombe_data$y4)
#Pearson correlation coefficient
# the [8] is because the r value is the 7th item in the list that the DIY_linear_regression function returns
DIY_linear_regression(anscombe_data$x1, anscombe_data$y1)[8]
DIY_linear_regression(anscombe_data$x2, anscombe_data$y2)[8]
DIY_linear_regression(anscombe_data$x3, anscombe_data$y3)[8]
DIY_linear_regression(anscombe_data$x4, anscombe_data$y4)[8]
# coefficient of multiple determination $R^2$
# R^2 value for each of the four datasets
# check your work with summary(lm(anscombe_data$y1~anscombe_data$x1, anscombe_data))
# the [7] is because the r_squared value is the 7th item in the list that the DIY_linear_regression function returns
DIY_linear_regression(anscombe_data$x1, anscombe_data$y1)[7]
DIY_linear_regression(anscombe_data$x2, anscombe_data$y2)[7]
DIY_linear_regression(anscombe_data$x3, anscombe_data$y3)[7]
DIY_linear_regression(anscombe_data$x4, anscombe_data$y4)[7]
# plots of the residuals
# question: residuals from scratch or do we want
DIY_linear_regression(anscombe_data$x1, anscombe_data$y1)[9]
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.res = resid(eruption.lm)
plot(faithful$waiting, eruption.res,
+     ylab="Residuals", xlab="Waiting Time",
library(ggplot2)
library(knitr)
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.res = resid(eruption.lm)
plot(faithful$waiting, eruption.res,
+     ylab="Residuals", xlab="Waiting Time",
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.res = resid(eruption.lm)
plot(faithful$waiting, eruption.res,
+     y="Residuals", x="Waiting Time",
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.res = resid(eruption.lm)
plot(faithful$waiting, eruption.res, ylab="Residuals", xlab="Waiting Time", main="Old Faithful Eruptions")
abline(0, 0)                  # the horizon
# QUESTION: ALLOWED TO USE THE LM RESID FOR THE MODEL HERE OR HAVE TO DIY IT?
y1.lm = lm(y1 ~ x1, data=anscombe_data)
y1.res = resid(y1.lm)
plot(anscombe_data$x1, y1.res, ylab="Residuals", xlab="x", main="Old Faithful Eruptions")
abline(0, 0)                  # the horizon
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2)
b0<-mean_y-mean_x*b1
e<-y - (b0+b1*x)
# the residual = observed - predicted
}
y1.lm = lm(y1 ~ x1, data=anscombe_data)
y1.res = resid(y1.lm)
plot(anscombe_data$x1, y1.res, ylab="Residuals", xlab="x", main="X1 and Y1 residuals")
abline(0, 0)                  # the horizon
x
anscombe_data$x1
DIY_residuals(anscombe_data$x1, anscombe_data$y1)
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:len(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
residual_list <- c(residual_list, e)
}
# return a list of the residuals in the same order as their associated x-values
return(residual_list)
}
plot(anscombe_data$x1, anscombe_data$y1)
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:len(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
residual_list <- c(residual_list, e)
}
# return a list of the residuals in the same order as their associated x-values
return(residual_list)
}
#plot(anscombe_data$x1, anscombe_data$y1)
DIY_residuals(anscombe_data$x1, anscombe_data$y1)
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
residual_list <- c(residual_list, e)
}
# return a list of the residuals in the same order as their associated x-values
return(residual_list)
}
#plot(anscombe_data$x1, anscombe_data$y1)
DIY_residuals(anscombe_data$x1, anscombe_data$y1)
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
residual_list[i]<-e
}
# return a list of the residuals in the same order as their associated x-values
return(residual_list)
}
#plot(anscombe_data$x1, anscombe_data$y1)
DIY_residuals(anscombe_data$x1, anscombe_data$y1)
anscombe_data$x1
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
print(e)
}
# return a list of the residuals in the same order as their associated x-values
return(residual_list)
}
#plot(anscombe_data$x1, anscombe_data$y1)
DIY_residuals(anscombe_data$x1, anscombe_data$y1)
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
}
# return a list of the residuals in the same order as their associated x-values
return(e)
}
#plot(anscombe_data$x1, anscombe_data$y1)
DIY_residuals(anscombe_data$x1, anscombe_data$y1)
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
}
# return a list of the residuals in the same order as their associated x-values
return(e)
}
plot(anscombe_data$x1, DIY_residuals(anscombe_data$x1, anscombe_data$y1))
# SWAP TO BE A HOMEMADE MODEL and a function to calulate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
}
# return a list of the residuals in the same order as their associated x-values
return(e)
}
plot(anscombe_data$x1, DIY_residuals(anscombe_data$x1, anscombe_data$y1), ylab="Residuals", abline(0, 0))
y1.lm = lm(y1 ~ x1, data=anscombe_data)
y1.res = resid(y1.lm)
plot(anscombe_data$x1, y1.res, xlab="x", main="X1 and Y1 residuals")
# the horizon
# function to calculate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
}
# return a list of the residuals in the same order as their associated x-values
return(e)
}
plot(anscombe_data$x1, DIY_residuals(anscombe_data$x1, anscombe_data$y1), ylab="Residuals", abline(0, 0))
# function to calculate the residuals
DIY_residuals<-function(x,y){
residual_list <- list()
# the actual y
y
# calculate the predicted y
mean_x<-mean(x)
mean_y<-mean(y)
for (i in 1:length(x)){
b1<-sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2) # slope
b0<-mean_y-mean_x*b1 #intercept
# the residual = observed - predicted
e<-y - (b0+b1*x)
}
# return a list of the residuals in the same order as their associated x-values
return(e)
}
plot(anscombe_data$x1, DIY_residuals(anscombe_data$x1, anscombe_data$y1), ylab="Residuals", abline(0, 0, col="purple"))
# actually making the residual plots for anscombe_data 1 to 4
plot(anscombe_data$x1, DIY_residuals(anscombe_data$x1, anscombe_data$y1), ylab="Residuals", abline(0, 0, col="purple"))
plot(anscombe_data$x2, DIY_residuals(anscombe_data$x2, anscombe_data$y2), ylab="Residuals", abline(0, 0, col="pink"))
plot(anscombe_data$x3, DIY_residuals(anscombe_data$x3, anscombe_data$y3), ylab="Residuals", abline(0, 0, col="red"))
plot(anscombe_data$x4, DIY_residuals(anscombe_data$x4, anscombe_data$y4), ylab="Residuals", abline(0, 0, col="orange"))
# homemade linear regression
DIY_linear_regression(anscombe_data$x1, anscombe_data$y1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # tools for data wrangling in R
library(reticulate) # provides a comprehensive set of tools for interoperability
# between Python and R.
# R code chunk
# configure Python
reticulate::py_config() # Double check that reticulate is actually using a
# new conda environment.
reticulate::py_install("sklearn", pip = TRUE) # force install with pip. sklearn
# wasn't coming up via anaconda.
reticulate::py_install("matplotlib")
reticulate::py_install("keras")
reticulate::py_install("pandas")
reticulate::py_install("requests")
# setting up the Python environment and bringing in the required Python packages
# is important.
# Running this code will take about 5 to 10 minutes if these Python libraries
# are not already installed.
# Common trouble shooting:
# if missing a package, try adding its name in an additional argument of
# py_install. if py_install isn't working then try adding the pip = TRUE
# argument to try installing the library through pip rather than anaconda.
reticulate::repl_python()
